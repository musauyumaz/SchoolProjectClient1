@page "/manage-comments"

@using ClientProject.Pages.Comments
@using SchoolProjectClient.Client.Services.Comments;
@using SchoolProjectClient.Client.Services.Users;
@using SchoolProjectClient.Client.Services.Posts;
@using SchoolProjectClient.Client.Model.Comment;
@using Variant = MudBlazor.Variant

@inject ICommentService _commentService;
@inject IUserService _userService;
@inject IPostService _postService;
@inject IDialogService _dialogService;



<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenAddCommentPopup">Add New Comment</MudButton>
<MudTable Items="@Comments" Class="full-width-table">
    <HeaderContent>
        <MudTh>User Name</MudTh>
        <MudTh>Post Id</MudTh>
        <MudTh>Content</MudTh>
        <MudTh>Like Count</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="User Name">@UserNames[context.UserId])</MudTd>
        <MudTd DataLabel="Post Id">@PostNames[context.PostId])</MudTd>
        <MudTd DataLabel="Content">@context.Content</MudTd>
        <MudTd DataLabel="Like Count">@context.LikeCount</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenEditCommentPopup(context.Id, context.UserId))">Edit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => OpenDeleteCommentPopup(context.Id, context.UserId))">Delete</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => OpenLikeCommentPopup(context.Id, context.UserId))">Like</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>


<style>
    .full-width-table .mud-table-container {
        width: 100%;
        overflow-x: auto;
    }
</style>

<br />

@code {

    public List<Comment> Comments { get; set; } = new List<Comment>();
    public Dictionary<string, string> UserNames { get; set; } = new Dictionary<string, string>();
    public Dictionary<string, string> PostNames { get; set; } = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        Comments = (await _commentService.GetAllCommentListAsync(0, 5)).Data.Comments;
        UserNames = await GetUserNameByUserIdsAsync(Comments.Select(c => c.UserId));
        PostNames = await GetPostNameByUserIdsAsync(Comments.Select(c => c.PostId));
    }

    private void OpenAddCommentPopup()
    {
        _dialogService.Show<AddCommentPopup>("Add Comment");
    }

    private async void OpenLikeCommentPopup(string id, string userId)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        parameters.Add("UserId", userId);
        var dialog = await _dialogService.ShowAsync<LikeCommentPopup>("Like Comment", parameters);
        if (!(await dialog.Result).Cancelled)
        {
            await OnInitializedAsync();
            dialog.Close();
        }
    }

    private async void OpenEditCommentPopup(string id, string userId)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        parameters.Add("UserId", userId);
        var dialog = await _dialogService.ShowAsync<EditCommentPopup>("Edit Comment", parameters);
        if (!(await dialog.Result).Cancelled)
        {
            await OnInitializedAsync();
            dialog.Close();
        }
    }

    private void OpenDeleteCommentPopup(string id, string userId)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        parameters.Add("UserId", userId);
        _dialogService.Show<DeleteCommentPopup>("Delete Comment", parameters);
    }




    public async Task<string> GetUserNameByIdAsync(string userId)
    {
        var response = await _userService.GetUserByIdAsync(userId);
        if (response.IsSucceeded && response.Data != null)
        {
            return response.Data.NickName;
        }
        return "Unknown";
    }
    public async Task<Dictionary<string, string>> GetUserNameByUserIdsAsync(IEnumerable<string> userIds)
    {
        var userNameDictionary = new Dictionary<string, string>();
        foreach (var userId in userIds)
        {
            var response = await _userService.GetUserByIdAsync(userId);
            if (response.IsSucceeded && response.Data != null)
            {
                userNameDictionary[userId] = response.Data.NickName;
            }
            else
            {
                userNameDictionary[userId] = "Unknown"; // Kullanıcı bilgisi bulunamadıysa
            }
        }
        return userNameDictionary;
    }
    public async Task<Dictionary<string, string>> GetPostNameByUserIdsAsync(IEnumerable<string> userIds)
    {
        var postNameDictionary = new Dictionary<string, string>();
        foreach (var userId in userIds)
        {
            var response = await _postService.GetByIdPostAsync(userId);
            if (response.IsSucceeded && response.Data != null)
            {
                postNameDictionary[userId] = response.Data.Title;
            }
            else
            {
                postNameDictionary[userId] = "Unknown"; // Kullanıcı bilgisi bulunamadıysa
            }
        }
        return postNameDictionary;
    }
}

